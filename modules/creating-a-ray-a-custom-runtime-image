:_module-type: PROCEDURE

[id="(creating-a-ray-a-custom-runtime-image)_{context}"]
= Creating a Ray custom runtime image


[role='_abstract']
Learn how to build and push a custom Ray runtime image to your registry, so that you can run distributed workloads in :productname-short:.
[NOTE]
====
These examples are provided for documentation purposes, on how to build custom container runtime images for distributed workloads. These examples are not supported by :openshift-platform: and are not a part of :productname-short:.
==== 

.Prerequisites

* You have logged in to {productname-long}.

* You have Podman or Docker installed on your local environment.

* You have access to a data science cluster that is configured to run distributed workloads as described in link:{rhoaidocshome}{default-format-url}/configuring-the-distributed-workloads-components[Configuring distributed workloads components].

* You have access to a Ray cluster image. 

.Procedure

. Create a Dockerfile in the working directory.  
Here is an example for the ray-torch image: 
+
[source, bash]
----
FROM quay.io/rhoai/ray:2.23.0-py39-cu121
RUN python3 -m pip install torch==2.3.1
----

. Build the container image using Podman. Here is an example for building ray-torch: 
+
[source, bash]
----
export IMG=ray-torch
cd $IMG
podman build -t ${IMG} -f Dockerfile
----
+
[Optional] use the integrated :productname-short: container registry. 

. [If using the :productname-short: registry] Expose the integrated container registry by using the `defaultRoute` parameter in the `configs.imageregistry.operator.openshift.io/cluster` resource and setting the route to true:
+
[source, bash]
----
oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge
----

. [If using the :productname-short: registry] Wait for the route to the container registry to be admitted:
+
[source, bash]
----
oc wait -n openshift-image-registry route/default-route    â€“for=jsonpath='{.status.ingress[0].conditions[0].status}'=True
----

. [If using the :productname-short: registry] Log into the integrated container registry with Podman:

+
[source, bash]
----
podman login -u $(oc whoami) -p $(oc whoami -t) $(oc registry info)
----

. Push the image to the integrated container registry using the following commands:
+
[source, bash]
----
podman tag ${IMG} $(oc registry info)/$(oc project -q)/${IMG}
 podman push $(oc registry info)/$(oc project -q)/${IMG}
----

. [If using the :productname-short: registry] Retrieve the image repository for the tag you want:
+
[source, bash]
----
oc get is ${IMG} -o jsonpath='{.status.tags[?(@.tag=="<TAG>")].items[0].dockerImageReference}'
----


.Next steps
Use the custom image to create a Ray cluster. See the [Ray documentation](https://docs.ray.io/en/latest/cluster/getting-started.html) for further information 
